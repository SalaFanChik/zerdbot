from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from app.keyboards.inline import get_courses_kb, get_course_options_kb
from app.db.user_crud import get_user_lang
from sqlalchemy.ext.asyncio import AsyncSession
from app.keyboards.reply import get_main_menu, get_course_back_menu
from app.utils.texts import hybrid_kaz, hybrid_rus, Yearly_kaz, Yearly_rus, get_ready_kaz, get_ready_rus, answer, faq_data, reviews_data
from aiogram.fsm.context import FSMContext
from app.states.user_state import InfoForm
import re
from app.utils.create_lead import create_amocrm_lead_and_contact
from aiogram.exceptions import TelegramBadRequest

router = Router()

@router.message(F.text.in_([
    "üìö –ö—É—Ä—Å—Ç–∞—Ä —Ç—É—Ä–∞–ª—ã –±—ñ–ª–≥—ñ–º –∫–µ–ª–µ–¥—ñ",
    "üìö –•–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫—É—Ä—Å–∞—Ö"
]))
async def courses_info_handler(message: Message, session: AsyncSession):
    lang = await get_user_lang(session, message.from_user.id)
    await message.answer(
        "–¢”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–¥—ã –±–∞—Å—ã–ø, –∫—É—Ä—Å—Ç–∞—Ä —Ç—É—Ä–∞–ª—ã “õ—ã—Å“õ–∞—à–∞ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—ã“£—ã–∑.",
        reply_markup=get_courses_kb(lang)
    )

async def safe_edit_or_send(callback: CallbackQuery, text: str, markup):
    try:
        await callback.message.edit_text(text, reply_markup=markup)
    except TelegramBadRequest:
        await callback.message.answer(text, reply_markup=markup)

@router.callback_query(F.data == "course_get_ready")
async def handle_get_ready(callback: CallbackQuery, session: AsyncSession):
    lang = await get_user_lang(session, callback.from_user.id)
    text = get_ready_kaz if lang == "kz" else get_ready_rus
    markup = get_course_options_kb("get_ready", lang)
    await callback.answer()
    await safe_edit_or_send(callback, text, markup)

@router.callback_query(F.data == "course_yearly")
async def handle_yearly(callback: CallbackQuery, session: AsyncSession):
    lang = await get_user_lang(session, callback.from_user.id)
    text = Yearly_kaz if lang == "kz" else Yearly_rus
    markup = get_course_options_kb("yearly", lang)
    await callback.answer()
    await safe_edit_or_send(callback, text, markup)

@router.callback_query(F.data == "course_hybrid")
async def handle_hybrid(callback: CallbackQuery, session: AsyncSession):
    lang = await get_user_lang(session, callback.from_user.id)
    text = hybrid_kaz if lang == "kz" else hybrid_rus
    markup = get_course_options_kb("hybrid", lang)
    await callback.answer()
    await safe_edit_or_send(callback, text, markup)

@router.callback_query(F.data == "back_to_courses")
async def back_to_courses(callback: CallbackQuery, session: AsyncSession):
    lang = await get_user_lang(session, callback.from_user.id)
    text = "“ö–∞–π –∫—É—Ä—Å —Ç—É—Ä–∞–ª—ã –±—ñ–ª–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?" if lang == "kz" else "–ö–∞–∫–æ–π –∫—É—Ä—Å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    markup = get_courses_kb(lang)
    await callback.answer()
    await safe_edit_or_send(callback, text, markup)

@router.callback_query(F.data == "go_home")
async def go_home(callback: CallbackQuery, session: AsyncSession):
    lang = await get_user_lang(session, callback.from_user.id)
    text = "–ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ –æ—Ä–∞–ª–¥—ã“£—ã–∑." if lang == "kz" else "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."
    markup = get_main_menu(lang)
    await callback.answer()
    await safe_edit_or_send(callback, text, markup)

@router.callback_query(F.data.endswith("_register"))
async def handle_register(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    lang = await get_user_lang(session, callback.from_user.id)
    await callback.answer()
    await state.set_state(InfoForm.name)
    await callback.message.answer(answer["ask_name"][lang], reply_markup=get_course_back_menu(lang))


@router.message(F.text.func(lambda text: "–ê—Ä—Ç“õ–∞" in text or "–ù–∞–∑–∞–¥" in text))
async def handle_back(message: Message, state: FSMContext, session: AsyncSession):
    lang = await get_user_lang(session, message.from_user.id)
    await message.answer(answer["greeting"][lang], reply_markup=get_main_menu(lang))
    await state.clear()

# FSM: –ò–º—è
@router.message(InfoForm.name)
async def process_name(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(name=message.text)
    lang = await get_user_lang(session, message.from_user.id)
    await message.answer(answer["ask_region"][lang], reply_markup=get_course_back_menu(lang))
    await state.set_state(InfoForm.region)

# FSM: –†–µ–≥–∏–æ–Ω
@router.message(InfoForm.region)
async def process_region(message: Message, state: FSMContext, session: AsyncSession):
    lang = await get_user_lang(session, message.from_user.id)
    if not re.fullmatch(r"[–ê-–Ø–∞-—è”ò”ô”®”©“ö“õ“∞“±“Æ“Ø–Ü—ñ–Å—ë\s\-]+", message.text):
        await message.answer("‚ùó ”®—Ç—ñ–Ω–µ–º—ñ–∑, –æ–±–ª—ã—Å –∞—Ç–∞—É—ã–Ω —Ç–µ–∫ ”ô—Ä—ñ–ø—Ç–µ—Ä–º–µ–Ω –∂–∞–∑—ã“£—ã–∑.")
        return
    await state.update_data(region=message.text)
    await message.answer(answer["ask_phone"][lang], reply_markup=get_course_back_menu(lang))
    await state.set_state(InfoForm.phone)

# FSM: –¢–µ–ª–µ—Ñ–æ–Ω
@router.message(InfoForm.phone)
async def process_phone(message: Message, state: FSMContext, session: AsyncSession):
    lang = await get_user_lang(session, message.from_user.id)
    phone = message.text.strip()
    if not re.fullmatch(r"(\+7|8)\d{10}", phone):
        await message.answer("üìµ –¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ “õ–∞—Ç–µ. –ú—ã—Å–∞–ª—ã: +77001234567 –Ω–µ–º–µ—Å–µ 87001234567")
        return
    await state.update_data(phone=phone)
    data = await state.get_data()
    success, result = await create_amocrm_lead_and_contact(
        name=data.get("name"),
        phone=data.get("phone"),
        region=data.get("region")
    )
    if success:
        await message.answer(answer["thank_you"][lang], reply_markup=get_main_menu(lang))
    else:
        await message.answer("‚ùó “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. ”®—Ç—ñ–Ω—ñ—à –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.")
        print(result)
    await state.clear()

@router.callback_query(F.data.endswith("_faq"))
async def handle_faq(callback: CallbackQuery, session: AsyncSession):
    lang = await get_user_lang(session, callback.from_user.id)
    course = callback.data.replace("_faq", "")
    text = faq_data.get(course, {}).get(lang, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    markup = get_course_options_kb(course, lang)
    await callback.answer()
    await safe_edit_or_send(callback, text, markup)

@router.callback_query(F.data.endswith("_reviews"))
async def handle_reviews(callback: CallbackQuery, session: AsyncSession):
    lang = await get_user_lang(session, callback.from_user.id)
    course = callback.data.replace("_reviews", "")
    text = reviews_data.get(course, {}).get(lang, "–û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    markup = get_course_options_kb(course, lang)
    await callback.answer()
    await safe_edit_or_send(callback, text, markup)
